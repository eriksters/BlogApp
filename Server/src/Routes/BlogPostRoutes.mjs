import express, { json } from "express";
import * as dotenv from "dotenv";
import mongoose from "mongoose";
import multer from "multer";
import * as fs from "fs/promises";
import * as path from "path";

//  Multer Config
//  Saves the incoming file to Temp dir with a randomly assigned name, keeping the file extension
const storage = multer.diskStorage({
  destination(req, file, callback) {
    callback(null, "Temp");
  },
  filename(req, file, callback) {
    console.log(file);
    callback(
      null,
      `temp_${Math.floor(99999 * Math.random())}.${file.originalname.substring(
        file.originalname.lastIndexOf(".") + 1
      )}`
    );
  },
});
const upload = multer({ storage });

//  Permanently save a file to specified dir and with specified name.
//  Preserves the file extension
const saveMulterFile = async (file, dir, name) => {
  const oldPath = file.path;
  const fileExtension = oldPath.substring(oldPath.lastIndexOf("."));

  //  If no name is specified, default to name generated on first save
  const fileNameNoExt = name
    ? name
    : oldPath.substring(oldPath.lastIndexOf("/"));
  const newPath = `${dir}/${fileNameNoExt}${fileExtension}`;

  console.log(`Renaming ${oldPath} to ${newPath}`);
  await fs.rename(oldPath, newPath);

  return newPath;
};

const BlogPostModel = mongoose.model("BlogPost");

//  Express
const BlogPostRoutes = express.Router();

//  Get 10 newest Blog Posts
//  If lastPostTime is specified, returns posts that are older than the specified time
BlogPostRoutes.get("/", async (req, res) => {
  const lastPostTime = req.query.lastPostTime
    ? req.query.lastPostTime
    : Date.now();

  try {
    let BlogPosts = await BlogPostModel.find({
      CreateTime: { $lt: lastPostTime },
    })
      .where()
      .sort({ CreateTime: "descending" })
      .limit(10)
      .exec();

    BlogPosts.forEach(
      (post) =>
        (post.ThumbnailURL = `${process.env.SERVER_BASE_URL}/${post.ThumbnailURL}`)
    );

    res.status(200).send({ BlogPosts });
  } catch (err) {
    console.error("Failed getting posts. ", err);
    res.sendStatus(500);
  }
});

BlogPostRoutes.post(
  "/",
  upload.fields([{ name: "Thumbnail" }, { name: "Data" }]),
  async (req, res) => {
    const BlogPostData = JSON.parse(req.body.Data);
    BlogPostData.CreateTime = Date.now();

    const BlogPostModel = mongoose.model("BlogPost");
    const NewPost = new BlogPostModel(BlogPostData);

    let CreatedPost;
    try {
      CreatedPost = await NewPost.save();
    } catch (err) {
      console.log(err);

      await fs.rm(req.files.Thumbnail[0].path);

      res.sendStatus(500);
    }

    //  Rename the file to Id generated by DB
    const newPath = await saveMulterFile(
      req.files.Thumbnail[0],
      `${process.env.SERVER_FILE_DIR}/Thumbnails`,
      `Thumb_${Math.floor(Math.random() * 10000)}_${Date.now()}`
    );

    //  Save URL to DB
    NewPost.ThumbnailURL = newPath.substring(newPath.indexOf("/") + 1);
    await NewPost.save();

    res.sendStatus(200);
  }
);

BlogPostRoutes.put(
  "/:id",
  upload.fields([{ name: "Thumbnail" }, { name: "Data" }]),
  async (req, res) => {
    const id = req.params.id;
    const UpdatedPost = JSON.parse(req.body.Data);
    let OldPost = null;

    try {
      OldPost = await BlogPostModel.findById(id);

      if (!OldPost) {
        console.log("Post not found");
        res.sendStatus(404);
      }
    } catch (err) {
      console.error("DB error\n", err);
      res.sendStatus(500);
    }

    //  If the request includes a new thumbnail, delete the old one and replace with new.
    //  If not, use the old thumbnail URL
    if (req.files.Thumbnail) {
      //  Delete old
      try {
        await fs.rm(`${process.env.SERVER_FILE_DIR}/${OldPost.ThumbnailURL}`);
      } catch (err) {
        console.error("Could not delete old thumbnail\n", err);
      }

      //  Save new
      try {
        const thumbnailURL = await saveMulterFile(
          req.files.Thumbnail[0],
          `${process.env.SERVER_FILE_DIR}/Thumbnails`,
          `Thumb_${Math.floor(Math.random() * 10000)}_${Date.now()}`
        );
        UpdatedPost.ThumbnailURL = thumbnailURL.substring(
          thumbnailURL.indexOf("/") + 1
        );
      } catch (err) {
        console.error("Could not save new thumbnail\n", err);
      }
    } else {
      UpdatedPost.ThumbnailURL = OldPost.ThumbnailURL;
    }

    await BlogPostModel.updateOne({ _id: id }, UpdatedPost);

    res.sendStatus(200);
  }
);

BlogPostRoutes.delete("/:id", async (req, res) => {
  const postId = req.params.id;

  const Post = await BlogPostModel.findOne({ _id: postId });

  console.log(Post);

  if (Post === null) {
    res.sendStatus(404);
  } else {
    try {
      await fs.rm("public/" + Post.ThumbnailURL);
    } catch (err) {
      //  TODO: Handle file not deleted
    }

    const deleteResult = await BlogPostModel.deleteOne({ _id: postId }).exec();

    if (deleteResult.deletedCount === 0) {
      res.sendStatus(500);
    } else {
      res.sendStatus(200);
    }
  }
});

export default BlogPostRoutes;
