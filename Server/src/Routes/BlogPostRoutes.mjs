import express, { json } from "express";
import * as dotenv from "dotenv";
import mongoose from "mongoose";
import * as fs from "fs/promises";
import * as path from "path";
import { TempStore, saveMulterFile } from "../Middleware/Multer.mjs";
import RequireAuth from "../Middleware/RequireAuth.mjs";

const BlogPostModel = mongoose.model("BlogPost");
const BlogPostRoutes = express.Router();

const createAbsoluteURLFromRelative = (relativeURL) => {
  return `${process.env.SERVER_BASE_URL}/${relativeURL}`;
};

//  Get next 10 Blog Posts
//  Allowed values for sortBy: new
BlogPostRoutes.get("/", async (req, res) => {
  const params = req.query;
  let query;
  let results;

  //  Construct the query
  query = BlogPostModel.find({});
  if (params.sortBy === "new") {
    const lastPostTime = params.lastPostTime || Date.now();

    query
      .where("CreateTime")
      .lt(lastPostTime)
      .sort({ CreateTime: "descending" });
  }

  //  Execute query
  try {
    results = await query.limit(10).exec();
  } catch (err) {
    console.error("Failed getting posts. ", err);
    res.sendStatus(500);
  }

  //  Format and send results
  results.forEach(
    (post) =>
      (post.ThumbnailURL = createAbsoluteURLFromRelative(post.ThumbnailURL))
  );
  res.status(200).send({ BlogPosts: results });
});

BlogPostRoutes.post(
  "/",
  RequireAuth,
  TempStore.fields([{ name: "Thumbnail" }, { name: "Data" }]),
  async (req, res) => {
    const BlogPostData = JSON.parse(req.body.Data);
    BlogPostData.CreateTime = Date.now();

    BlogPostData.CreatedBy = req.account._id.toString();

    const BlogPostModel = mongoose.model("BlogPost");
    const NewPost = new BlogPostModel(BlogPostData);

    let CreatedPost;
    try {
      CreatedPost = await NewPost.save();
    } catch (err) {
      console.log(err);

      await fs.rm(req.files.Thumbnail[0].path);

      res.sendStatus(500);
    }

    //  Rename the file to Id generated by DB
    const newPath = await saveMulterFile(
      req.files.Thumbnail[0],
      `${process.env.SERVER_FILE_DIR}/Thumbnails`,
      `Thumb_${Math.floor(Math.random() * 10000)}_${Date.now()}`
    );

    //  Save URL to DB
    NewPost.ThumbnailURL = newPath.substring(newPath.indexOf("/") + 1);
    await NewPost.save();

    res.sendStatus(200);
  }
);

BlogPostRoutes.put(
  "/:id",
  RequireAuth,
  TempStore.fields([{ name: "Thumbnail" }, { name: "Data" }]),
  async (req, res) => {
    const id = req.params.id;
    const UpdatedPost = JSON.parse(req.body.Data);
    let OldPost = null;

    try {
      OldPost = await BlogPostModel.findById(id);

      if (!OldPost) {
        console.log("Post not found");
        res.sendStatus(404);
      }
    } catch (err) {
      console.error("DB error\n", err);
      res.sendStatus(500);
    }

    if (OldPost.CreatedBy !== req.account._id.toString()) {
      return res.status(401).send("You are not allowed to edit this post");
    }

    //  If the request includes a new thumbnail, delete the old one and replace with new.
    //  If not, use the old thumbnail URL
    if (req.files.Thumbnail) {
      //  Delete old
      try {
        await fs.rm(`${process.env.SERVER_FILE_DIR}/${OldPost.ThumbnailURL}`);
      } catch (err) {
        console.error("Could not delete old thumbnail\n", err);
      }

      //  Save new
      try {
        const thumbnailURL = await saveMulterFile(
          req.files.Thumbnail[0],
          `${process.env.SERVER_FILE_DIR}/Thumbnails`,
          `Thumb_${Math.floor(Math.random() * 10000)}_${Date.now()}`
        );
        UpdatedPost.ThumbnailURL = thumbnailURL.substring(
          thumbnailURL.indexOf("/") + 1
        );
      } catch (err) {
        console.error("Could not save new thumbnail\n", err);
      }
    } else {
      UpdatedPost.ThumbnailURL = OldPost.ThumbnailURL;
    }

    await BlogPostModel.updateOne({ _id: id }, UpdatedPost);

    res.sendStatus(200);
  }
);

BlogPostRoutes.delete("/:id", RequireAuth, async (req, res) => {
  const postId = req.params.id;

  const Post = await BlogPostModel.findOne({ _id: postId });

  if (Post === null) {
    res.sendStatus(404);
  } else {
    try {
      await fs.rm("public/" + Post.ThumbnailURL);
    } catch (err) {}

    if (Post.CreatedBy !== req.account._id.toString()) {
      return res.status(401).send("You are not allowed to delete this post");
    }

    const deleteResult = await BlogPostModel.deleteOne({ _id: postId }).exec();

    if (deleteResult.deletedCount === 0) {
      res.sendStatus(500);
    } else {
      res.sendStatus(200);
    }
  }
});

export default BlogPostRoutes;
