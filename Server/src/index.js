import express, { json } from "express";
import * as dotenv from "dotenv";
import mongoose from "mongoose";
import multer from "multer";
import * as fs from "fs/promises";
import * as path from "path";

//  Dev env config
dotenv.config();

//  Multer Config
const storage = multer.diskStorage({
  destination(req, file, callback) {
    callback(null, "Temp");
  },
  filename(req, file, callback) {
    console.log(file);
    callback(
      null,
      `temp_${Math.floor(99999 * Math.random())}.${file.originalname.substring(
        file.originalname.lastIndexOf(".") + 1
      )}`
    );
  },
});

const upload = multer({ storage });

const saveMulterFile = async (file, dir, name) => {
  const oldPath = file.path;
  const fileExtension = oldPath.substring(oldPath.lastIndexOf("."));

  //  If no name is specified, default to name generated on first save
  const fileNameNoExt = name
    ? name
    : oldPath.substring(oldPath.lastIndexOf("/"));
  const newPath = `${dir}/${fileNameNoExt}${fileExtension}`;

  console.log(`Renaming ${oldPath} to ${newPath}`);
  await fs.rename(oldPath, newPath);

  return newPath;
};

//  Mongoose config
//  Generate the connection string
const connectionString = process.env.DB_URL.replace(
  "<username>",
  process.env.DB_USERNAME
).replace("<password>", process.env.DB_PASSWORD);

const BlogPostSchema = new mongoose.Schema({
  Title: String,
  Description: String,
  ThumbnailURL: String,
  Content: String,
  CreateTime: Date,
});

const BlogPostModel = mongoose.model("BlogPost", BlogPostSchema);

//  Express config
const port = 3000;
const app = express();

app.use(express.json());

app.get("/", (req, res) => {
  res.send("Hello world");
});

//  Routes
app.use(express.static(path.resolve() + "\\public"));

app.get("/blogposts", async (req, res) => {
  // const BlogPosts = [
  //   {
  //     title: "Post from the net",
  //     description: "Welcome to the internet. Come and take a seat.",
  //     image:
  //       "https://www.pixsy.com/wp-content/uploads/2021/04/ben-sweet-2LowviVHZ-E-unsplash-1.jpeg",
  //   },
  //   {
  //     title:
  //       "Testing whether massive amounts of caffeine increase productivity?",
  //     description: "I see time!",
  //     image:
  //       "https://wompampsupport.azureedge.net/fetchimage?siteId=7716&url=https%3A%2F%2Fwww.cancer.org%2Fcontent%2Fdam%2Fcancer-org%2Fimages%2Fphotographs%2Fsingle-use%2Fespresso-coffee-cup-with-beans-on-table-restricted.jpg%2Fjcr%3Acontent%2Frenditions%2Fcq5dam.web.1280.1280.jpeg",
  //   },
  // ];

  try {
    let BlogPosts = await BlogPostModel.find({})
      .sort({ CreateTime: "descending" })
      .exec();
    // .sort({ Title: "ascending" })
    // .limit(20);

    BlogPosts.forEach(
      (post) =>
        (post.ThumbnailURL = `${process.env.SERVER_BASE_URL}/${post.ThumbnailURL}`)
    );

    res.status(200).send({ BlogPosts });
  } catch (err) {
    console.error("Failed getting posts. ", err);
    res.sendStatus(500);
  }
});

app.post(
  "/blogposts",
  upload.fields([{ name: "Thumbnail" }, { name: "Data" }]),
  async (req, res) => {
    const BlogPostData = JSON.parse(req.body.Data);
    BlogPostData.CreateTime = Date.now();

    const BlogPostModel = mongoose.model("BlogPost");
    const NewPost = new BlogPostModel(BlogPostData);

    // console.log(BlogPostData);

    let CreatedPost;
    try {
      CreatedPost = await NewPost.save();
    } catch (err) {
      console.log(err);

      await fs.rm(req.files.Thumbnail[0].path);

      res.sendStatus(500);
    }

    //  Rename the file to Id generated by DB
    const newPath = await saveMulterFile(
      req.files.Thumbnail[0],
      `${process.env.SERVER_FILE_DIR}/Thumbnails`,
      CreatedPost._id.toString()
    );

    // const oldPath = req.files.Thumbnail[0].path;
    // const fileExtension = oldPath.substring(oldPath.lastIndexOf("."));
    // const newPath = `public/Thumbnails/${CreatedPost._id.toString()}${fileExtension}`;
    // console.log(`Renaming ${oldPath} to ${newPath}`);
    // await fs.rename(oldPath, newPath);

    //  Save URL to DB
    NewPost.ThumbnailURL = newPath.substring(newPath.indexOf("/") + 1);
    await NewPost.save();

    // BlogPostModel.updateOne({})

    // console.log("Done creating new post", CreatedPost._id.toString());
    res.sendStatus(200);
  }
);

app.put(
  "/blogposts/:id",
  upload.fields([{ name: "Thumbnail" }, { name: "Data" }]),
  async (req, res) => {
    const id = req.params.id;
    const UpdatedPost = JSON.parse(req.body.Data);
    let OldPost = null;
    let thumbnailURL = null;

    try {
      OldPost = await BlogPostModel.findById(id);

      if (!OldPost) {
        console.log("Post not found");
        res.sendStatus(404);
      }
    } catch (err) {
      console.error("DB error\n", err);
      res.sendStatus(500);
    }

    //  If the request includes a new image, delete the old one and replace with new
    if (req.files.Thumbnail) {
      try {
        await fs.rm(`${process.env.SERVER_FILE_DIR}/${OldPost.ThumbnailURL}`);
      } catch (err) {
        console.error("Could not delete old thumbnail\n", err);
      }
      try {
        thumbnailURL = await saveMulterFile(
          req.files.Thumbnail[0],
          `${process.env.SERVER_FILE_DIR}/Thumbnails`,
          OldPost._id
        );
      } catch (err) {
        console.error("Could not save new thumbnail\n", err);
      }
    } else {
      thumbnailURL = OldPost.ThumbnailURL;
    }

    UpdatedPost.ThumbnailURL = thumbnailURL.substring(
      thumbnailURL.indexOf("/") + 1
    );

    // console.log({ ...OldPost, ...UpdatedPost });

    await BlogPostModel.updateOne({ _id: id }, UpdatedPost); // { ...OldPost, UpdatedPost });

    res.sendStatus(200);
  }
);

app.delete("/blogposts/:id", async (req, res) => {
  const postId = req.params.id;

  const Post = await BlogPostModel.findOne({ _id: postId });

  console.log(Post);

  if (Post === null) {
    res.sendStatus(404);
  } else {
    try {
      await fs.rm("public/" + Post.ThumbnailURL);
    } catch (err) {
      //  TODO: Handle file not deleted
    }

    const deleteResult = await BlogPostModel.deleteOne({ _id: postId }).exec();
    // const deleteResult = { deletedCount: 1 };

    if (deleteResult.deletedCount === 0) {
      res.sendStatus(500);
    } else {
      res.sendStatus(200);
    }
  }
});

// app.post(
//   "/upload",
//   upload.fields([{ name: "photo" }, { name: "BlogPost" }]),
//   (req, res) => {
//     console.log("file", req.files);
//     console.log(req.body);
//     res.sendStatus(200);
//   }
// );

// async function getPosts() {
//   const BlogPost = mongoose.model("BlogPost");

//   const query = BlogPost.find({});

//   console.error("Counting");
//   console.log(await query.count().exec());
// }

async function main() {
  await mongoose
    .connect(connectionString, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    })
    .then(() => {
      console.log("Database connection established");
    })
    .catch((err) => {
      console.error("Database connection failed");
    });

  app.listen(port);
}

main().catch((err) => {
  console.error("Crashed:\n" + error);
});
